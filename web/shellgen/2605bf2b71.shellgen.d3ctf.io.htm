<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"></head><body>
    <form method="POST" action="/submit">
        <label for="token">Team Token:</label><br>
        <input type="text" name="token" id="token" value="2605bf2b71"><br>
        <label for="code">Code:</label><br>
        <textarea name="code" id="code">Enter text here...</textarea>
        <input type="submit" value="Submit">
    </form>

</body><!--
# irrelevant codes are removed (...)
# note that this code is not used in shellgen2(misc), give it up.

client = DockerClient()
app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(16)
queue = Queue()

def run_container(image, command, mounts=None):
    container = client.containers.run(
        image, command,
        mounts=mounts,
        read_only=True,
        detach=True,
        labels={'evaluate': '1'},
        network='none',
        mem_limit=1024 * 1024 * 100
    )
    try:
        container.wait(timeout=5)
        res = container.logs()
    except RequestException:
        container.kill()
        return 'timeout'
    finally:
        container.remove()
    return res


def gen_shell(answer, path):
    try:
        result = run_container(
            'python', f'sh -c "echo -n {answer} | python /opt/gen.py"',
            [types.Mount(
                type='bind',
                source=path,
                target='/opt',
            )])
        return result
    except Exception as e:
        print(e)
        return b''


def put_result(token, s):
    with open(path.join('templates', token, 'result.html'), 'w') as f:
        f.write(s)


def evaluate(token, code):
    answer = random_str()

    try:
        makedirs(path.join('workdir', token), exist_ok=True)
        makedirs(path.join('templates', token), exist_ok=True)
        with open(path.join('workdir', token, 'gen.py'), 'w') as f:
            f.write(code)
    except (NotADirectoryError, FileExistsError):
        with open(path.join('templates', token, 'result.html'), 'w') as f:
            f.write('context creation failed')
        return

    try:
        shell = gen_shell(answer, path.join(
            environ['APP_DIR'], 'workdir', token
        ))
        stdshell = gen_shell(answer, path.dirname(environ['STD_FILE']))
    except:
        stdshell = b''
        shell = b''

    if not waf(shell):
        put_result(token, 'D3t3ct3d')
        return

    result = run_container(
        'php:7-cli',
        f'sh -c "echo -n {base64.b64encode(shell).decode()}| base64 -d | php"')
    if result == 'timeout':
        put_result(token, 'Bad shell, timed out.')

    if answer.encode() == result:
        if len(stdshell) < len(shell):
            put_result(
                token,
                'Great, your shell produced the correct results\n'
                'However, it\'s too long, try harder?')
        else:
            put_result(
                token,
                'Are you the master of coding? \n'
                'Good to hear that you solved this, but this is a web challenge.\n'
                'Maybe you should try shellgen2 which is a misc challenge.')
    else:
        put_result(token, 'Wr0ng Answ3r')


...

@app.route('/result')
def result():
    token = session.get('token', '')
    if not token:
        return 'token not set'
    if os.path.exists(os.path.join('templates', token, 'result.html')):
        result = render_template(os.path.join(token, 'result.html'))
        os.remove(os.path.join('templates', token, 'result.html'))
        return result
    else:
        return 'wait for a sec...<script>setTimeout(()=>location.reload(), 1000);</script>'


def poll():
    for container in client.containers.list(filters={'label': f'evaluate=1'}):
        container.kill()
        container.remove()
    if queue.empty():
        return
    job = queue.get()
    thread = Thread(target=evaluate, args=[job['token'], job['code']])
    thread.start()


scheduler = APScheduler()
scheduler.init_app(app)
scheduler.start()
scheduler.add_job(id='executor', func=poll, trigger="interval", seconds=10)
app.run('0.0.0.0')

--></html>